8.
function racePromises(promises)
{
return Promise.race(promises);
}
 const p1=new Promise((resolve)=>
setTimeout(()=>resolve("promise1 resolved"),1000)

const p2=new Promise((,reject0=>
setTimeout(()=>reject ("Promise 2 rejected"),500)
);

racePromises([p1,p2]).then((result)=>{console.log(result);
.catch(error)=>{
console.log(error)
})
7.
function fetMulData(urls){
const promises =urls.map((url)=>
fetch(url).then((response)=>response.json()));

return Promise.all(promises);
}
const urlsToFetch=[
"https://jsonplaceholder.typicode.com/todos/1",
"https://jsonplaceholder.typicode.com/todos/2",

"https://jsonplaceholder.typicode.com/todos/2"



]

fetMulData(urlsToFetch).then((responses)=>{
console.log(responses)
})
6.
function fetUserDataandPost(userId){
return fetch (`"https://jsonplaceholder.typicode.com/users/${users}`
).then((response)=>response.json()).then((userData)=>{

return fetch (`"https://jsonplaceholder.typicode.com/post?userId=${userId}`).then((response)=>response.json()).then((posts)=>({user:userData,posts}));
});
}
fetUserDataandPost(1).then((result)=>{
console.log(result)
});

5.
function mulWithCallback(nums,callback){
const multipliedarray=nums.map((num)=>num*2);
callback(multipliedarray);


const inputArray=[1,2,3,4]
mulWithCallback(inputarray,(result)=>{console.log(result)});

4.
async function fetchData(url){
const response = await fetch(url);
const data= await  response.json();
return data;}
fetchData("https://jsonplaceholder.typicode.com/todos/1").then((data=>{
console.log(data);
});

2.
function getData(){
return new Promise((resolve)=>{
setTimeout(()=>{
resolve("data fetched successfully.")
},2000);
});
}
getdData.then((result)=>{
console.log(result);
});
1.
function sumAsync(a,b,callback){


setTimeout(()=>{
const res= a+b;
callback(res)

},1000);
}

sumAsync(3,7,(result)=>{
console.log(result);
});


